{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","head","logo","src","alt","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","variant","gutterBottom","start","end","value","duration","separator","color","Date","toDateString","url","fetchData","country","a","changeableurl","axios","get","modifiedData","fetchDailyData","requiredData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","console","log","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","formcontrol","NativeSelect","defaultValue","onChange","e","target","i","key","App","props","fetchedData","setState","state","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc19981e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__7G4W3\",\"logo\":\"Cards_logo__11n_W\",\"head\":\"Cards_head__2GLoV\",\"card\":\"Cards_card__2AEO1\",\"infected\":\"Cards_infected__3rHAS\",\"recovered\":\"Cards_recovered__10vJe\",\"deaths\":\"Cards_deaths__2Wb7r\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core'\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup'\nimport cx from 'classnames'\n\nconst Cards = (data) => {\n    const {data : {confirmed, recovered, deaths, lastUpdate}} = data;\n    if(!confirmed){\n        return 'Loading...';\n    }\n    return(\n        <div className = {styles.container}>\n            <div className = {styles.head}>\n            <h1>C<span className={styles.logo}><img src=\"https://img.icons8.com/nolan/64/coronavirus.png\" alt=\"covid_logo\"/></span>VID-19 <span>GLOBAL</span> TRACKER</h1>\n            </div>\n            <Grid container spacing = {3} justify = \"center\">\n                <Grid item component = {Card} xs={12} md={3} className = {cx(styles.card, styles.infected)}>\n                    <CardContent >\n                        <Typography variant=\"h5\" gutterBottom>\n                            INFECTED\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                            start={0}\n                            end = {confirmed.value}\n                            duration={2}\n                            separator=\",\"\n                            />\n                        </Typography>\n                        <Typography variant=\"h5\" color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString() }\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            No. of Infected People with Covid-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={3} className = {cx(styles.card, styles.recovered)}>\n                    <CardContent color=\"blue\">\n                        <Typography variant=\"h5\" gutterBottom>\n                            RECOVERED\n                        </Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp\n                            start={0}\n                            end = {recovered.value}\n                            duration={2}\n                            separator=\",\"\n                            />\n                        </Typography>\n                        <Typography variant=\"h5\" color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString() }\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            No. of Recovered People from Covid-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={3} className = {cx(styles.card, styles.deaths)}>\n                    <CardContent color=\"blue\">\n                        <Typography variant=\"h5\" gutterBottom>\n                            DEATHS\n                        </Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp\n                            start={0}\n                            end = {deaths.value}\n                            duration={2}\n                            separator=\",\"\n                            />\n                        </Typography>\n                        <Typography variant=\"h5\" color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString() }\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            No. of Deaths From Covid-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n    try {\n        let changeableurl = url;\n\n        if(country){\n            changeableurl = `${url}/countries/${country}`;\n        }\n        const {data} = await axios.get(changeableurl);\n\n    const modifiedData = {\n        confirmed: data.confirmed,\n        deaths : data.deaths,\n        recovered: data.recovered,\n        lastUpdate : data.lastUpdate\n    }\n\n        return modifiedData;\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`${url}/daily`);\n\n        const requiredData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return requiredData;\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data : {countries}} = await axios.get(`${url}/countries`);\n        \n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ( {data, country} ) => {\n    const [ dailyData, setDailyData ] = useState([]); \n\n    useEffect( () => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    }, []);\n\n    const lineChart = (\n        dailyData.length ? (<Line\n            data = {{\n                labels: dailyData.map(({date}) => date),\n                datasets: [{\n                    data : dailyData.map(({confirmed}) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true\n                }, {\n                    data : dailyData.map(({deaths}) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5 )',\n                    fill: true\n                }],\n            }}\n        />) : null \n    )\n\n    const barChart = (\n        data.confirmed ?\n         (<Bar \n            data = {{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'People',\n                    backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)' ],\n                    data: [data.confirmed.value, data.recovered.value, data.deaths.value],\n                }]\n            }}\n            options = {{\n                legend : {display: false},\n                title: {display: true, text: `CURRENT STATE IN ${country}`},\n\n            }}\n             />) : null\n    )\n\n    return(\n        <div className = {styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../api';\n \nconst CountryPicker = ( { handleCountryChange } ) => {\n\n    const [ fetchedCountries, setfetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setfetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    }, [setfetchedCountries]\n    );\n\n    return(\n        <FormControl className={styles.formcontrol}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option> )}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React, { Component } from 'react'\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             data : {},\n             country: '',\n        }\n    }\n    \n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({\n            data: fetchedData,\n            country: country\n        })\n        //fetch data\n        //set data\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n\n        this.setState({ data : fetchedData });\n\n        console.log(fetchedData);\n    }\n\n    render() {\n        return (\n            <div className={styles.container}>\n                <Cards data={this.state.data} />\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\n                <Chart data={this.state.data} country={this.state.country} />\n            </div>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2UeSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Ry_2z\"};"],"sourceRoot":""}